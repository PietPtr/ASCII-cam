#include <iostream>
#include <ncurses.h>

#include <opencv2/core/core.hpp>        // Basic OpenCV structures (cv::Mat, Scalar)
#include <opencv2/imgproc/imgproc.hpp>  // Gaussian Blur
#include <opencv2/highgui/highgui.hpp>  // OpenCV window I/O

//Laptop webcam size: 320x240

using namespace cv;

int main()
{
    std::string letters = "$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,\"^`\'.";

    initscr();                 /* Start curses mode     */
    printw("Hello World !!!"); /* Print Hello World    */
    refresh();                 /* Print it on to the real screen */

    VideoCapture cap(-1);     // get 'any' cam
    while( cap.isOpened() )   // check if we succeeded
    {
        Mat frame;
        if ( ! cap.read(frame) )
            break;
        //imshow("Float",frame);
        //std::cout << (int)frame.at<char>(0, 0) << ", " << (int)frame.at<char>(0, 1) << ", " << (int)frame.at<char>(0, 2) << "\n";

        //for (int y = 0; y < )
        //std::cout << "Width: " << frame.cols << ", Height: " << frame.rows << "\n";

        int terminalWidth = 150;
        int terminalHeight = (80 * frame.rows) / frame.cols;
        std::cout << terminalHeight << "\n";

        for (int y = 0; y < frame.rows; y += frame.rows / terminalHeight)
        {
            for (int x = 0; x < frame.cols; x += frame.cols / terminalWidth)
            {
                //int R = frame.at<char>()
                Vec3b pixel = frame.at<Vec3b>(y, x);
                int r = pixel.val[2];
                int g = pixel.val[1];
                int b = pixel.val[0];

                std::cout << letters.at(((r+g+b) / 768.0) * letters.length());
                //std::cout << x << "," << y << "\n";
                //std::cout << ((r+g+b) / 768.0) * letters.length() << "\n";
            }
            std::cout << "\n";
        }

        int k = waitKey(33);
        if ( k==27 )
            break;
    }

    endwin();                  /* End curses mode    */

    return 0;
}


/* Outdated C interface \/

using namespace cv;

int main(int argc,char *argv[])
{
    int c;
    IplImage* color_img;
    CvCapture* cv_cap = cvCaptureFromCAM(0);
    cvNamedWindow("Float",0); // create window
    while (true)
    {
        color_img = cvQueryFrame(cv_cap); // get frame
        if(color_img != 0)
            cvShowImage("Float", color_img); // show frame
        //std::cout << color_img->at<char>(20, 20) << "\n";
        c = cvWaitKey(10); // wait 10 ms or for key stroke
        if(c == 27)
            break; // if ESC, break and quit
    }

    // clean up
    cvReleaseCapture( &cv_cap );
    cvDestroyWindow("Float");

    return 0;
}*/

